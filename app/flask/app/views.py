from flask import Flask, make_response, jsonify, request, redirect, url_for
from flask_mail import Mail, Message
from flask.views import MethodView
from flask_pymongo import PyMongo
from flask_cors import CORS
from app import app
import os
CORS(app)

###### THIS NEEDS TO BE EDITED TO SETUP STRYKER'S MAIL #######
app.config['MAIL_SERVER']='smtp.gmail.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_DEFAULT_SENDER'] = 'uzairtq@gmail.com'
app.config['MAIL_USERNAME'] = 'uzairtq@gmail.com'
app.config['MAIL_PASSWORD'] = 'hammadmalik'
app.config['MAIL_USE_SSL'] = True
mail = Mail(app)
##############################################################

app.config["MONGO_URI"] = 'mongodb://mongodb:27017/flaskdb'
mongo = PyMongo(app)
db = mongo.db

@app.route("/")
def index():
    app_name = os.getenv("APP_NAME")
    if app_name:
        workRequests = db.work_request.find()
        item = {}
        data = []
        for w_req in workRequests:
            item = {"wr": w_req['wr'], "title": w_req['title'], "request_type": w_req['type'], "priority": w_req['priority'], "requestor_email": w_req['requestor_email'], "supervisor_email": w_req['supervisor_email'], "description": w_req['description'], "desired_completion_date": w_req['desired_completion_date'], "request_date": w_req['request_date']} 
            data.append(item)
        return make_response(jsonify(data))
    return "Container is not working!!!"

class WorkRequestApi(MethodView):
    """ /api/workrequest/<work_request> """

    error = {
        "requestNotFound": {
            "errorCode": "requestNotFound",
            "errorMessage": "request not found"
        },
        "requestAlreadyExists": {
            "errorCode": "requestAlreadyExists",
            "errorMessage": "Could not create request. The request already exists"
        }
    }

    # def get(self, work_request):
    #     """ Get a request """
    #     if not workRequests.get(work_request, None):
    #         return make_response(jsonify(self.error["requestNotFound"]), 400)
    #     return make_response(jsonify(workRequests[work_request]), 200)

    def post(self, work_request):
        """ Create a request """
        body = request.get_json()
        wr = body.get("wr", None)
        title = body.get("title", None)
        request_type = body.get("type", None)
        priority = body.get("priority", None)
        requestor_email = body.get("requestor_email", None)
        supervisor_email = body.get("supervisor_email", None)
        description = body.get("description", None)
        completion_date = body.get("desired_completion_date", None)
        request_date = body.get("request_date", None)

#       Sending to database 
        w_req = {"wr": wr, "title": title, "type": request_type, "priority": priority, "requestor_email": requestor_email, "supervisor_email": supervisor_email, "description": description, "desired_completion_date": completion_date, "request_date": request_date}
        db.work_request.insert_one(w_req)

#       Sending Email to both the supervisor and the requestor
#        body_template = "\nWork Request: "+wr+"\nTitle: "+title+"\nRequest type: "+request_type+"\nRequestor: "+requestor_email.split('@')[0]+"\nSupervisor's email: "+supervisor_email+"\nPriority: "+priority+"\nDesired completion date: "+completion_date+"\nDate of request: "+request_date+"\nDescription of request: "+description+"\nThank you,\nCTE Team"
#        subject = "CTE " + wr + " has been submitted for " + title + " as a " +priority+ " priority"
#        msg_supervisor = Message(subject, recipients = [supervisor_email])
#        msg_requestor = Message(subject, recipients = [requestor_email])
#        msg_supervisor.body = "Test Lab Supervisor,\n\nThis is an autogenerated email from CTE notifying you of a repair request submitted by a Test Lab Team member that reports to you.  No action is required from you.  This is simply to inform you of the equipment effected and the request to repair it.\n" + body_template
#        msg_requestor.body = "Test Lab Staff,\n\nThis is an auto generated email from CTE notifying you that we have received your request for test equipment repair.  The Work Request number for this repair request is "+wr+" and the details of your request are below.  Every effort will be made to meet your desired completion date of "+completion_date+".  Any changes in your desired completion date or priority can be communicated to the CTE Manager.\n" + body_template
#        mail.send(msg_supervisor)
#        mail.send(msg_requestor)
        return 'The notification emails have been sent to the supervisor and the requestor!'

    # def delete(self, work_request):
    #     """ Delete a request """
    #     if not workRequests.get(work_request, None):
    #         return make_response(jsonify(self.error["requestNotFound"]), 400)
    #     del workRequests[work_request]
    #     return make_response(jsonify({}), 200)

app.add_url_rule("/api/workrequest/<work_request>", view_func=WorkRequestApi.as_view("work_request_api"))

class GetList(MethodView):
    """ /api/workrequest/ """
    def get(self):
        """ Get wr list """
        workRequests = db.work_request.find()
        data = []
        for w_req in workRequests:
            data.append(w_req['wr'])
        return make_response(jsonify(data))
app.add_url_rule("/api/workrequest", view_func=GetList.as_view("workrequest"))

if __name__ == "__main__":
    app.run(debug=True)
